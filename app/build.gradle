apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "mp.com"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {

        release {
            minifyEnabled false
            debuggable true
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions.unitTests.includeAndroidResources = true
}

android.testOptions {
    unitTests.returnDefaultValues = true
    unitTests.all {
        jacoco {
            includeNoLocationClasses = true
        }
    }
}
kapt {
    generateStubs = true
}

dependencies {

    def room_version = "1.1.1"
    def lifecycle_version = "1.1.1"
    def retrofitVersion = "2.4.0"
    def okhttpLoggingInterceptorVersion = "3.9.1"
    def paging_version = "1.0.1"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support:preference-v7:27.1.1'
    implementation 'com.android.support:preference-v14:27.1.1'
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    kapt 'com.github.bumptech.glide:compiler:4.7.1'

    //Paging
    implementation "android.arch.paging:runtime:$paging_version"

    //Room
    implementation "android.arch.persistence.room:runtime:$room_version"
    kapt "android.arch.persistence.room:compiler:$room_version"

    //ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
    kapt "android.arch.lifecycle:compiler:$lifecycle_version"

    //firebase
    implementation 'com.google.firebase:firebase-core:16.0.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.5'

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation"com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:retrofit-mock:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpLoggingInterceptorVersion"

    //kotlin coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:0.22.5"

    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-v4:27.1.1'

    //Testing
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.2.50"
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
}
apply plugin: 'com.google.gms.google-services'

task jacocoTestReport(type: JacocoReport, dependsOn: [
//if you have already run those tasks in your build, just comment them
'testMycmsMockDebugUnitTest',
'testMycmsProdDebugUnitTest',
'createMycmsMockDebugCoverageReport',
'createMycmsProdDebugCoverageReport',
]) {
//Define which type of report you want to generate
    reports {
        xml.enabled = true
        html.enabled = true
    }
    //define which classes to exclude
    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
            '**/*Module.*', // Modules for Dagger.
            '**/*Dagger*.*', // Dagger auto-generated code.
            '**/*MembersInjector*.*', // Dagger auto-generated code.
            '**/*_Provide*Factory*.*',
            '**/*_Factory.*', //Dagger auto-generated code
            '**/*$*$*.*', // Anonymous classes generated by kotlin
            //add libraries
            'android/**/*.*',
            'com/**/*.*',
            'uk/**/*.*',
            'io/**/*.*',
            //remove what we don't test
            'androidTest/**/*.*',
            'test/**/*.*',
            '**/injector/**/*.*',
            '**/model/**/*.*',
            '**/mock/**/*.*',
            '**/event/**/*.*',
            '**/**_ViewBinding**',
            '**/*EventType.*',
            '**/**Mocked'
    ]
    //Define your source and your classes: we want to test the production code
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/mycmsProd/debug", excludes: fileFilter)
    def mainSrc = files(["src/main/java","src/mycms/java"])
    //Explain to Jacoco where is your source code
    sourceDirectories = files([mainSrc])
//Explain to Jacoco where are you .class file
    classDirectories = files([debugTree])
    //As you want to gather all your tests reports, add the ec and exec you want to be took into
    //account when generating the report
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testMycmsMockDebugUnitTest.exec",
            "jacoco/testMycmsProdDebugUnitTest.exec",
            "outputs/code-coverage/connected/flavors/**/*coverage.ec"
    ])
}